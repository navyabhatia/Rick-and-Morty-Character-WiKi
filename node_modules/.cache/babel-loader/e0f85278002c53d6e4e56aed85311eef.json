{"ast":null,"code":"var _jsxFileName = \"/Users/navyabhatia/Desktop/react-wiki 2/src/helpers/withSearchBar.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst withSearchBar = WrappedComponent => {\n  var _s = $RefreshSig$();\n\n  const WithSearchBar = props => {\n    _s();\n\n    const {\n      setfilteredCharactersData,\n      charactersData\n    } = props;\n    const [inputValue, setInputValue] = useState(\"\");\n    const [searchBy, setSearchBy] = useState(\"name\");\n    const [autosuggesstions, setAutosuggesstions] = useState([]);\n    const [filterTag, setFilterTag] = useState(\"\");\n\n    const handleSearch = e => {\n      // handle empty input\n      if (searchBy.length === 0 || inputValue.length === 0) {\n        return;\n      } // filter character based on search text\n\n\n      const filterCharacters = () => {\n        const currentFilteredCharacters = charactersData.filter(item => {\n          const SEARCH_TEXT = inputValue.trim().toLocaleLowerCase();\n          const TARGET_SEARCH_TEXT = item[searchBy].trim().toLocaleLowerCase();\n          return SEARCH_TEXT === TARGET_SEARCH_TEXT;\n        });\n        setfilteredCharactersData([...currentFilteredCharacters]);\n      };\n\n      filterCharacters();\n      setFilterTag(inputValue);\n      setInputValue(\"\");\n    };\n\n    const clearFilters = () => {\n      setfilteredCharactersData([...charactersData]);\n    };\n\n    const handleTagDelete = e => {\n      clearFilters(); // clear all filters\n\n      setFilterTag(\"\"); // clear filter tag\n    }; // update autosuggestions\n\n\n    useEffect(() => {\n      let currentAutosuggestions = [];\n\n      if (charactersData !== null && charactersData !== void 0 && charactersData.length) {\n        currentAutosuggestions = charactersData.map(item => String(item[searchBy]));\n      } // remove duplicate suggestions\n\n\n      currentAutosuggestions = [...new Set(currentAutosuggestions)];\n      setAutosuggesstions(currentAutosuggestions);\n    }, [searchBy, charactersData]);\n    const dataProps = {\n      inputValue,\n      setInputValue,\n      autosuggesstions,\n      handleSearch,\n      filterTag,\n      handleTagDelete,\n      searchBy,\n      setSearchBy\n    };\n    return /*#__PURE__*/_jsxDEV(WrappedComponent, {\n      dataProps: dataProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 12\n    }, this);\n  };\n\n  _s(WithSearchBar, \"aUwtX9xe+Z6/Bf6hEtvNdnrEJNo=\");\n\n  return WithSearchBar;\n};\n\nexport default withSearchBar;","map":{"version":3,"sources":["/Users/navyabhatia/Desktop/react-wiki 2/src/helpers/withSearchBar.jsx"],"names":["React","useState","useEffect","withSearchBar","WrappedComponent","WithSearchBar","props","setfilteredCharactersData","charactersData","inputValue","setInputValue","searchBy","setSearchBy","autosuggesstions","setAutosuggesstions","filterTag","setFilterTag","handleSearch","e","length","filterCharacters","currentFilteredCharacters","filter","item","SEARCH_TEXT","trim","toLocaleLowerCase","TARGET_SEARCH_TEXT","clearFilters","handleTagDelete","currentAutosuggestions","map","String","Set","dataProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,MAAMC,aAAa,GAAIC,gBAAD,IAAsB;AAAA;;AAC1C,QAAMC,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAC/B,UAAM;AAAEC,MAAAA,yBAAF;AAA6BC,MAAAA;AAA7B,QAAgDF,KAAtD;AACA,UAAM,CAACG,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,EAAD,CAA5C;AACA,UAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,MAAD,CAAxC;AACA,UAAM,CAACY,gBAAD,EAAmBC,mBAAnB,IAA0Cb,QAAQ,CAAC,EAAD,CAAxD;AACA,UAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,EAAD,CAA1C;;AAEA,UAAMgB,YAAY,GAAIC,CAAD,IAAO;AAC1B;AACA,UAAIP,QAAQ,CAACQ,MAAT,KAAoB,CAApB,IAAyBV,UAAU,CAACU,MAAX,KAAsB,CAAnD,EAAsD;AACpD;AACD,OAJyB,CAM1B;;;AACA,YAAMC,gBAAgB,GAAG,MAAM;AAC7B,cAAMC,yBAAyB,GAAGb,cAAc,CAACc,MAAf,CAAuBC,IAAD,IAAU;AAChE,gBAAMC,WAAW,GAAGf,UAAU,CAACgB,IAAX,GAAkBC,iBAAlB,EAApB;AACA,gBAAMC,kBAAkB,GAAGJ,IAAI,CAACZ,QAAD,CAAJ,CAAec,IAAf,GAAsBC,iBAAtB,EAA3B;AACA,iBAAOF,WAAW,KAAKG,kBAAvB;AACD,SAJiC,CAAlC;AAKApB,QAAAA,yBAAyB,CAAC,CAAC,GAAGc,yBAAJ,CAAD,CAAzB;AACD,OAPD;;AAQAD,MAAAA,gBAAgB;AAChBJ,MAAAA,YAAY,CAACP,UAAD,CAAZ;AACAC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACD,KAlBD;;AAoBA,UAAMkB,YAAY,GAAG,MAAM;AACzBrB,MAAAA,yBAAyB,CAAC,CAAC,GAAGC,cAAJ,CAAD,CAAzB;AACD,KAFD;;AAIA,UAAMqB,eAAe,GAAIX,CAAD,IAAO;AAC7BU,MAAAA,YAAY,GADiB,CACb;;AAChBZ,MAAAA,YAAY,CAAC,EAAD,CAAZ,CAF6B,CAEX;AACnB,KAHD,CA/B+B,CAoC/B;;;AACAd,IAAAA,SAAS,CAAC,MAAM;AACd,UAAI4B,sBAAsB,GAAG,EAA7B;;AACA,UAAItB,cAAJ,aAAIA,cAAJ,eAAIA,cAAc,CAAEW,MAApB,EAA4B;AAC1BW,QAAAA,sBAAsB,GAAGtB,cAAc,CAACuB,GAAf,CAAoBR,IAAD,IAC1CS,MAAM,CAACT,IAAI,CAACZ,QAAD,CAAL,CADiB,CAAzB;AAGD,OANa,CAOd;;;AACAmB,MAAAA,sBAAsB,GAAG,CAAC,GAAG,IAAIG,GAAJ,CAAQH,sBAAR,CAAJ,CAAzB;AACAhB,MAAAA,mBAAmB,CAACgB,sBAAD,CAAnB;AACD,KAVQ,EAUN,CAACnB,QAAD,EAAWH,cAAX,CAVM,CAAT;AAYA,UAAM0B,SAAS,GAAG;AAChBzB,MAAAA,UADgB;AAEhBC,MAAAA,aAFgB;AAGhBG,MAAAA,gBAHgB;AAIhBI,MAAAA,YAJgB;AAKhBF,MAAAA,SALgB;AAMhBc,MAAAA,eANgB;AAOhBlB,MAAAA,QAPgB;AAQhBC,MAAAA;AARgB,KAAlB;AAWA,wBAAO,QAAC,gBAAD;AAAkB,MAAA,SAAS,EAAEsB;AAA7B;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GA7DD;;AAD0C,KACpC7B,aADoC;;AA+D1C,SAAOA,aAAP;AACD,CAhED;;AAkEA,eAAeF,aAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst withSearchBar = (WrappedComponent) => {\n  const WithSearchBar = (props) => {\n    const { setfilteredCharactersData, charactersData } = props;\n    const [inputValue, setInputValue] = useState(\"\");\n    const [searchBy, setSearchBy] = useState(\"name\");\n    const [autosuggesstions, setAutosuggesstions] = useState([]);\n    const [filterTag, setFilterTag] = useState(\"\");\n\n    const handleSearch = (e) => {\n      // handle empty input\n      if (searchBy.length === 0 || inputValue.length === 0) {\n        return;\n      }\n\n      // filter character based on search text\n      const filterCharacters = () => {\n        const currentFilteredCharacters = charactersData.filter((item) => {\n          const SEARCH_TEXT = inputValue.trim().toLocaleLowerCase();\n          const TARGET_SEARCH_TEXT = item[searchBy].trim().toLocaleLowerCase();\n          return SEARCH_TEXT === TARGET_SEARCH_TEXT;\n        });\n        setfilteredCharactersData([...currentFilteredCharacters]);\n      };\n      filterCharacters();\n      setFilterTag(inputValue);\n      setInputValue(\"\");\n    };\n\n    const clearFilters = () => {\n      setfilteredCharactersData([...charactersData]);\n    };\n\n    const handleTagDelete = (e) => {\n      clearFilters(); // clear all filters\n      setFilterTag(\"\"); // clear filter tag\n    };\n\n    // update autosuggestions\n    useEffect(() => {\n      let currentAutosuggestions = [];\n      if (charactersData?.length) {\n        currentAutosuggestions = charactersData.map((item) =>\n          String(item[searchBy])\n        );\n      }\n      // remove duplicate suggestions\n      currentAutosuggestions = [...new Set(currentAutosuggestions)];\n      setAutosuggesstions(currentAutosuggestions);\n    }, [searchBy, charactersData]);\n\n    const dataProps = {\n      inputValue,\n      setInputValue,\n      autosuggesstions,\n      handleSearch,\n      filterTag,\n      handleTagDelete,\n      searchBy,\n      setSearchBy,\n    };\n\n    return <WrappedComponent dataProps={dataProps} />;\n  };\n  return WithSearchBar;\n};\n\nexport default withSearchBar;\n"]},"metadata":{},"sourceType":"module"}