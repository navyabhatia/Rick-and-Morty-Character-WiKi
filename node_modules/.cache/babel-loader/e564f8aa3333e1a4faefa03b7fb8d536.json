{"ast":null,"code":"import { v4 as uuidv4 } from \"uuid\";\n\nconst registerUser = async userPayload => {\n  try {\n    var _allUsers;\n\n    if (!localStorage.getItem(\"users\")) {\n      // if users schema is not created yet\n      localStorage.setItem(\"users\", JSON.stringify([]));\n    } // check user in database\n\n\n    let allUsers = localStorage.getItem(\"users\");\n    allUsers = JSON.parse(allUsers);\n    console.log(allUsers);\n    const userExist = (_allUsers = allUsers) === null || _allUsers === void 0 ? void 0 : _allUsers.some(user => user.email === userPayload.email);\n\n    if (userExist) {\n      // user exist errror\n      throw new Error(\"User already exists\");\n    } else {\n      // create new user in database\n      const newUser = {\n        id: uuidv4(),\n        ...userPayload\n      };\n      allUsers = [...allUsers, newUser];\n      localStorage.setItem(\"users\", JSON.stringify(allUsers));\n      return {\n        success: true,\n        msg: \"New user created\",\n        data: newUser\n      };\n    }\n  } catch (err) {\n    return {\n      success: false,\n      msg: `${err.message}`\n    };\n  }\n};\n\nexport default registerUser;","map":{"version":3,"sources":["/Users/navyabhatia/Desktop/Github Folder/Rick-and-Morty-Character-Wiki/src/API/RegisterUser.js"],"names":["v4","uuidv4","registerUser","userPayload","localStorage","getItem","setItem","JSON","stringify","allUsers","parse","console","log","userExist","some","user","email","Error","newUser","id","success","msg","data","err","message"],"mappings":"AAAA,SAASA,EAAE,IAAIC,MAAf,QAA6B,MAA7B;;AAEA,MAAMC,YAAY,GAAG,MAAOC,WAAP,IAAuB;AAC1C,MAAI;AAAA;;AACF,QAAI,CAACC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAL,EAAoC;AAClC;AACAD,MAAAA,YAAY,CAACE,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAe,EAAf,CAA9B;AACD,KAJC,CAKF;;;AACA,QAAIC,QAAQ,GAAGL,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAf;AAEAI,IAAAA,QAAQ,GAAGF,IAAI,CAACG,KAAL,CAAWD,QAAX,CAAX;AAEAE,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AAEA,UAAMI,SAAS,gBAAGJ,QAAH,8CAAG,UAAUK,IAAV,CACfC,IAAD,IAAUA,IAAI,CAACC,KAAL,KAAeb,WAAW,CAACa,KADrB,CAAlB;;AAIA,QAAIH,SAAJ,EAAe;AACb;AACA,YAAM,IAAII,KAAJ,CAAU,qBAAV,CAAN;AACD,KAHD,MAGO;AACL;AACA,YAAMC,OAAO,GAAG;AAAEC,QAAAA,EAAE,EAAElB,MAAM,EAAZ;AAAgB,WAAGE;AAAnB,OAAhB;AACAM,MAAAA,QAAQ,GAAG,CAAC,GAAGA,QAAJ,EAAcS,OAAd,CAAX;AACAd,MAAAA,YAAY,CAACE,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeC,QAAf,CAA9B;AAEA,aAAO;AAAEW,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,GAAG,EAAE,kBAAtB;AAA0CC,QAAAA,IAAI,EAAEJ;AAAhD,OAAP;AACD;AACF,GA3BD,CA2BE,OAAOK,GAAP,EAAY;AACZ,WAAO;AAAEH,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,GAAG,EAAG,GAAEE,GAAG,CAACC,OAAQ;AAAtC,KAAP;AACD;AACF,CA/BD;;AAiCA,eAAetB,YAAf","sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\n\nconst registerUser = async (userPayload) => {\n  try {\n    if (!localStorage.getItem(\"users\")) {\n      // if users schema is not created yet\n      localStorage.setItem(\"users\", JSON.stringify([]));\n    }\n    // check user in database\n    let allUsers = localStorage.getItem(\"users\");\n\n    allUsers = JSON.parse(allUsers);\n\n    console.log(allUsers);\n\n    const userExist = allUsers?.some(\n      (user) => user.email === userPayload.email\n    );\n\n    if (userExist) {\n      // user exist errror\n      throw new Error(\"User already exists\");\n    } else {\n      // create new user in database\n      const newUser = { id: uuidv4(), ...userPayload };\n      allUsers = [...allUsers, newUser];\n      localStorage.setItem(\"users\", JSON.stringify(allUsers));\n\n      return { success: true, msg: \"New user created\", data: newUser };\n    }\n  } catch (err) {\n    return { success: false, msg: `${err.message}` };\n  }\n};\n\nexport default registerUser;\n"]},"metadata":{},"sourceType":"module"}