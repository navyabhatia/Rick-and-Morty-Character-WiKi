{"ast":null,"code":"import _asyncToGenerator from\"/Users/navyabhatia/Desktop/react-wiki 2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/Users/navyabhatia/Desktop/react-wiki 2/node_modules/@babel/runtime/regenerator/index.js\";var loginUser=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(userPayload){var _allUsers,allUsers,user;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;if(localStorage.getItem(\"users\")){_context.next=3;break;}throw new Error(\"User not found\");case 3:// check user in database\nallUsers=localStorage.getItem(\"users\");allUsers=JSON.parse(allUsers);user=(_allUsers=allUsers)===null||_allUsers===void 0?void 0:_allUsers.find(function(user){return user.email===userPayload.email;});if(user){_context.next=10;break;}throw new Error(\"User not found\");case 10:if(!(user.password!==userPayload.password)){_context.next=14;break;}throw new Error(\"Invalid credentials\");case 14:return _context.abrupt(\"return\",{success:true,message:\"User found\",data:user});case 15:_context.next=20;break;case 17:_context.prev=17;_context.t0=_context[\"catch\"](0);return _context.abrupt(\"return\",{success:false,msg:\"\".concat(_context.t0.message)});case 20:case\"end\":return _context.stop();}}},_callee,null,[[0,17]]);}));return function loginUser(_x){return _ref.apply(this,arguments);};}();export default loginUser;","map":{"version":3,"sources":["/Users/navyabhatia/Desktop/react-wiki 2/src/API/LoginUser.js"],"names":["loginUser","userPayload","localStorage","getItem","Error","allUsers","JSON","parse","user","find","email","password","success","message","data","msg"],"mappings":"6PAAA,GAAMA,CAAAA,SAAS,0FAAG,iBAAOC,WAAP,iKAETC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAFS,8BAGN,IAAIC,CAAAA,KAAJ,CAAU,gBAAV,CAHM,QAKd;AACIC,QANU,CAMCH,YAAY,CAACC,OAAb,CAAqB,OAArB,CAND,CAQdE,QAAQ,CAAGC,IAAI,CAACC,KAAL,CAAWF,QAAX,CAAX,CAEMG,IAVQ,YAUDH,QAVC,oCAUD,UAAUI,IAAV,CAAe,SAACD,IAAD,QAAUA,CAAAA,IAAI,CAACE,KAAL,GAAeT,WAAW,CAACS,KAArC,EAAf,CAVC,IAYTF,IAZS,+BAaN,IAAIJ,CAAAA,KAAJ,CAAU,gBAAV,CAbM,cAeRI,IAAI,CAACG,QAAL,GAAkBV,WAAW,CAACU,QAftB,gCAgBJ,IAAIP,CAAAA,KAAJ,CAAU,qBAAV,CAhBI,yCAkBH,CAAEQ,OAAO,CAAE,IAAX,CAAiBC,OAAO,CAAE,YAA1B,CAAwCC,IAAI,CAAEN,IAA9C,CAlBG,2HAsBP,CAAEI,OAAO,CAAE,KAAX,CAAkBG,GAAG,WAAK,YAAIF,OAAT,CAArB,CAtBO,uEAAH,kBAATb,CAAAA,SAAS,4CAAf,CA0BA,cAAeA,CAAAA,SAAf","sourcesContent":["const loginUser = async (userPayload) => {\n  try {\n    if (!localStorage.getItem(\"users\")) {\n      throw new Error(\"User not found\");\n    }\n    // check user in database\n    let allUsers = localStorage.getItem(\"users\");\n\n    allUsers = JSON.parse(allUsers);\n\n    const user = allUsers?.find((user) => user.email === userPayload.email);\n\n    if (!user) {\n      throw new Error(\"User not found\");\n    } else {\n      if (user.password !== userPayload.password) {\n        throw new Error(\"Invalid credentials\");\n      } else {\n        return { success: true, message: \"User found\", data: user };\n      }\n    }\n  } catch (err) {\n    return { success: false, msg: `${err.message}` };\n  }\n};\n\nexport default loginUser;\n"]},"metadata":{},"sourceType":"module"}