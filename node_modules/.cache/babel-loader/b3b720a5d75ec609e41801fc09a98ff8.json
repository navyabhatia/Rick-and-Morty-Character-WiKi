{"ast":null,"code":"import _toConsumableArray from\"/Users/navyabhatia/Desktop/react-wiki 2/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _objectSpread from\"/Users/navyabhatia/Desktop/react-wiki 2/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"/Users/navyabhatia/Desktop/react-wiki 2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/Users/navyabhatia/Desktop/react-wiki 2/node_modules/@babel/runtime/regenerator/index.js\";import{v4 as uuidv4}from\"uuid\";var registerUser=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(userPayload){var _allUsers,allUsers,userExist,newUser;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;if(!localStorage.getItem(\"users\")){// if users schema is not created yet\nlocalStorage.setItem(\"users\",JSON.stringify([]));}// check user in database\nallUsers=localStorage.getItem(\"users\");allUsers=JSON.parse(allUsers);console.log(allUsers);userExist=(_allUsers=allUsers)===null||_allUsers===void 0?void 0:_allUsers.some(function(user){return user.email===userPayload.email;});if(!userExist){_context.next=10;break;}throw new Error(\"User already exists\");case 10:// create new user in database\nnewUser=_objectSpread({id:uuidv4()},userPayload);allUsers=[].concat(_toConsumableArray(allUsers),[newUser]);localStorage.setItem(\"users\",JSON.stringify(allUsers));return _context.abrupt(\"return\",{success:true,msg:\"New user created\",data:newUser});case 14:_context.next=19;break;case 16:_context.prev=16;_context.t0=_context[\"catch\"](0);return _context.abrupt(\"return\",{success:false,msg:\"\".concat(_context.t0.message)});case 19:case\"end\":return _context.stop();}}},_callee,null,[[0,16]]);}));return function registerUser(_x){return _ref.apply(this,arguments);};}();export default registerUser;","map":{"version":3,"sources":["/Users/navyabhatia/Desktop/react-wiki 2/src/API/RegisterUser.js"],"names":["v4","uuidv4","registerUser","userPayload","localStorage","getItem","setItem","JSON","stringify","allUsers","parse","console","log","userExist","some","user","email","Error","newUser","id","success","msg","data","message"],"mappings":"8fAAA,OAASA,EAAE,GAAIC,CAAAA,MAAf,KAA6B,MAA7B,CAEA,GAAMC,CAAAA,YAAY,0FAAG,iBAAOC,WAAP,2KAEjB,GAAI,CAACC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAL,CAAoC,CAClC;AACAD,YAAY,CAACE,OAAb,CAAqB,OAArB,CAA8BC,IAAI,CAACC,SAAL,CAAe,EAAf,CAA9B,EACD,CACD;AACIC,QAPa,CAOFL,YAAY,CAACC,OAAb,CAAqB,OAArB,CAPE,CASjBI,QAAQ,CAAGF,IAAI,CAACG,KAAL,CAAWD,QAAX,CAAX,CAEAE,OAAO,CAACC,GAAR,CAAYH,QAAZ,EAEMI,SAbW,YAaCJ,QAbD,oCAaC,UAAUK,IAAV,CAChB,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,KAAL,GAAeb,WAAW,CAACa,KAArC,EADgB,CAbD,KAiBbH,SAjBa,+BAmBT,IAAII,CAAAA,KAAJ,CAAU,qBAAV,CAnBS,SAqBf;AACMC,OAtBS,gBAsBGC,EAAE,CAAElB,MAAM,EAtBb,EAsBoBE,WAtBpB,EAuBfM,QAAQ,8BAAOA,QAAP,GAAiBS,OAAjB,EAAR,CACAd,YAAY,CAACE,OAAb,CAAqB,OAArB,CAA8BC,IAAI,CAACC,SAAL,CAAeC,QAAf,CAA9B,EAxBe,gCA0BR,CAAEW,OAAO,CAAE,IAAX,CAAiBC,GAAG,CAAE,kBAAtB,CAA0CC,IAAI,CAAEJ,OAAhD,CA1BQ,2HA6BV,CAAEE,OAAO,CAAE,KAAX,CAAkBC,GAAG,WAAK,YAAIE,OAAT,CAArB,CA7BU,uEAAH,kBAAZrB,CAAAA,YAAY,4CAAlB,CAiCA,cAAeA,CAAAA,YAAf","sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\n\nconst registerUser = async (userPayload) => {\n  try {\n    if (!localStorage.getItem(\"users\")) {\n      // if users schema is not created yet\n      localStorage.setItem(\"users\", JSON.stringify([]));\n    }\n    // check user in database\n    let allUsers = localStorage.getItem(\"users\");\n\n    allUsers = JSON.parse(allUsers);\n\n    console.log(allUsers);\n\n    const userExist = allUsers?.some(\n      (user) => user.email === userPayload.email\n    );\n\n    if (userExist) {\n      // user exist errror\n      throw new Error(\"User already exists\");\n    } else {\n      // create new user in database\n      const newUser = { id: uuidv4(), ...userPayload };\n      allUsers = [...allUsers, newUser];\n      localStorage.setItem(\"users\", JSON.stringify(allUsers));\n\n      return { success: true, msg: \"New user created\", data: newUser };\n    }\n  } catch (err) {\n    return { success: false, msg: `${err.message}` };\n  }\n};\n\nexport default registerUser;\n"]},"metadata":{},"sourceType":"module"}