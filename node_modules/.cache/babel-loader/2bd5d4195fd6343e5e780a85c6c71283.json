{"ast":null,"code":"async function saveCharacterToDatabase(payload) {\n  try {\n    let allSaveCharacters = localStorage.getItem(\"saveCharacters\");\n\n    if (!allSaveCharacters) {\n      // initialize save character array\n      localStorage.setItem(\"saveCharacters\", JSON.stringify([]));\n    }\n\n    const allSaveCharactersArray = JSON.parse(localStorage.getItem(\"saveCharacters\")); // check if character already saved\n\n    const characterExist = allSaveCharactersArray === null || allSaveCharactersArray === void 0 ? void 0 : allSaveCharactersArray.some(item => item.id === payload.id);\n\n    if (characterExist) {\n      throw new Error(\"Character already saved before\");\n    } // save character only if not saved yet\n\n\n    const {\n      episode,\n      location,\n      origin,\n      ...resData\n    } = payload; // save only necessary data to save localstorage space\n\n    const CURRENT_SAVED_CHARACTERS = [...allSaveCharactersArray, { ...resData\n    }];\n    localStorage.setItem(\"saveCharacters\", JSON.stringify(CURRENT_SAVED_CHARACTERS));\n    return {\n      success: true,\n      msg: \"Character saved successfully\",\n      data: resData\n    };\n  } catch (err) {\n    return {\n      success: false,\n      msg: `${err.message}`\n    };\n  }\n}\n\nexport default saveCharacterToDatabase;","map":{"version":3,"sources":["/Users/navyabhatia/Desktop/react-wiki 2/src/API/saveCharacter.js"],"names":["saveCharacterToDatabase","payload","allSaveCharacters","localStorage","getItem","setItem","JSON","stringify","allSaveCharactersArray","parse","characterExist","some","item","id","Error","episode","location","origin","resData","CURRENT_SAVED_CHARACTERS","success","msg","data","err","message"],"mappings":"AAAA,eAAeA,uBAAf,CAAuCC,OAAvC,EAAgD;AAC9C,MAAI;AACF,QAAIC,iBAAiB,GAAGC,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAAxB;;AACA,QAAI,CAACF,iBAAL,EAAwB;AACtB;AACAC,MAAAA,YAAY,CAACE,OAAb,CAAqB,gBAArB,EAAuCC,IAAI,CAACC,SAAL,CAAe,EAAf,CAAvC;AACD;;AAED,UAAMC,sBAAsB,GAAGF,IAAI,CAACG,KAAL,CAC7BN,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAD6B,CAA/B,CAPE,CAUF;;AACA,UAAMM,cAAc,GAAGF,sBAAH,aAAGA,sBAAH,uBAAGA,sBAAsB,CAAEG,IAAxB,CACpBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYZ,OAAO,CAACY,EADT,CAAvB;;AAIA,QAAIH,cAAJ,EAAoB;AAClB,YAAM,IAAII,KAAJ,CAAU,gCAAV,CAAN;AACD,KAjBC,CAmBF;;;AACA,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,QAAX;AAAqBC,MAAAA,MAArB;AAA6B,SAAGC;AAAhC,QAA4CjB,OAAlD,CApBE,CAqBF;;AACA,UAAMkB,wBAAwB,GAAG,CAC/B,GAAGX,sBAD4B,EAE/B,EAAE,GAAGU;AAAL,KAF+B,CAAjC;AAIAf,IAAAA,YAAY,CAACE,OAAb,CACE,gBADF,EAEEC,IAAI,CAACC,SAAL,CAAeY,wBAAf,CAFF;AAIA,WAAO;AACLC,MAAAA,OAAO,EAAE,IADJ;AAELC,MAAAA,GAAG,EAAE,8BAFA;AAGLC,MAAAA,IAAI,EAAEJ;AAHD,KAAP;AAKD,GAnCD,CAmCE,OAAOK,GAAP,EAAY;AACZ,WAAO;AAAEH,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,GAAG,EAAG,GAAEE,GAAG,CAACC,OAAQ;AAAtC,KAAP;AACD;AACF;;AAED,eAAexB,uBAAf","sourcesContent":["async function saveCharacterToDatabase(payload) {\n  try {\n    let allSaveCharacters = localStorage.getItem(\"saveCharacters\");\n    if (!allSaveCharacters) {\n      // initialize save character array\n      localStorage.setItem(\"saveCharacters\", JSON.stringify([]));\n    }\n\n    const allSaveCharactersArray = JSON.parse(\n      localStorage.getItem(\"saveCharacters\")\n    );\n    // check if character already saved\n    const characterExist = allSaveCharactersArray?.some(\n      (item) => item.id === payload.id\n    );\n\n    if (characterExist) {\n      throw new Error(\"Character already saved before\");\n    }\n\n    // save character only if not saved yet\n    const { episode, location, origin, ...resData } = payload;\n    // save only necessary data to save localstorage space\n    const CURRENT_SAVED_CHARACTERS = [\n      ...allSaveCharactersArray,\n      { ...resData },\n    ];\n    localStorage.setItem(\n      \"saveCharacters\",\n      JSON.stringify(CURRENT_SAVED_CHARACTERS)\n    );\n    return {\n      success: true,\n      msg: \"Character saved successfully\",\n      data: resData,\n    };\n  } catch (err) {\n    return { success: false, msg: `${err.message}` };\n  }\n}\n\nexport default saveCharacterToDatabase;\n"]},"metadata":{},"sourceType":"module"}